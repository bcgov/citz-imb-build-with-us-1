name: Github Environment - Build With Us 1 Frontend Web App

on:
  push:
    branches: [main]
    paths:
      - "src/frontend/**"
  workflow_dispatch:
  
jobs:
  BWU-App-Build-Tag-Push:
    runs-on: ubuntu-latest
    environment: APP-Dev
    steps:
    
      # Checkout Citz Build With Us 1 Github Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Find Latest Commit on Github Repository main branch (last PR merged to main)
      - name: Set Commit Hash for Image Tag
        run: |
          commit_hash=$(echo $(git rev-parse --short HEAD))
          echo "pull_request_hash=$commit_hash" >> $GITHUB_ENV
      
      # Create a JSON file containing latest commit hash for use throughout pipeline
      - name: Create JSON file for Image Tag State
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'hash.json'
          json: '{ "hash":"${{ env.pull_request_hash }}" }'

      # Upload JSON file as github action artifact to be downloaded for later use
      - name: Upload JSON file
        uses: actions/upload-artifact@v3
        with: 
          name: hash.json
          path: hash.json
      
      # Login the BC Gov Openshift (CITZ Sandbox TOOLS Namespace)
      - name: Cluster Login -> TOOLS Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_TOOLS_SA_PASSWORD }}"}'
          cmd: |
            'version'
            
      # Login to BC Gov Docker Image Repository
      - name: Login to Openshift Docker
        run : |
          docker login ${{ secrets.OPENSHIFT4_PUBLIC_IMAGE_REPOSITORY_BASE_URL }} -u ${{ secrets.OPENSHIFT4_TOOLS_SA_USERNAME }} -p ${{ secrets.OPENSHIFT4_TOOLS_SA_PASSWORD }}
      
      # Run npm run init from repository root directory
      - name: Run npm run init
        run: | 
          npm run init
      
      # Build the BWU Frontend Application Image via docker-compose
      - name: Build the Docker image
        run: |
          sudo docker compose react-frontend
      
      # TROUBLESHOOTING - view images present in github action run
      - name: Docker List Images
        run: |
          docker image ls 
      
      # Tag Docker Image built with latest commit hash (ex// $HASH-dev)
      - name: Docker Tag Version
        run: |
          docker tag citz-imb-build-with-us-1_react-frontend ${{ secrets.OPENSHIFT4_APP_PUBLIC_IMAGE_REPOSITORY }}:${{ env.pull_request_hash }}-${{ secrets.ENVIRONMENT }}
      
      # TROUBLESHOOTING - view images present in github action run
      - name: Docker List Images
        run: |
          docker image ls 
          
      # Push docker image to BC Gov Repository
      - name: Docker Push Version
        run: |
          docker push ${{ secrets.OPENSHIFT4_APP_PUBLIC_IMAGE_REPOSITORY }}:${{ env.pull_request_hash }}-${{ secrets.ENVIRONMENT }}
  DEV-deploy:
    runs-on: ubuntu-latest
    environment: APP-Dev
    needs: [BWU-App-Build-Tag-Push]
    steps:
    
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      # Login to BC Gov Openshift (CITZ Sandbox DEV Namespace)
      - name: Cluster Login -> DEV Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
            
      # Download JSON Artifact with pull request hash
      - name: Download JSON artifact
        uses: actions/download-artifact@v3
        with:
          name: hash.json
          
      # Read value from JSON artifact as a step output
      - name: Read JSON File
        id: json-file
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'hash.json'
          prop_path: 'hash'
          
      # Access step output of pull request hash value and set as a environment variable
      - name: Set Commit Hash Value to Environment
        run: |
          commit_hash=$(echo ${{ steps.json-file.outputs.prop }})
          echo "pull_request_hash=$commit_hash" >> $GITHUB_ENV
            
      # Use deploy helper script to process and apply BWU Frontend Application template into DEV namespace
      - name: Process and Apply APP DeploymentConfig, Service, Route templates
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.APPLICATION_NAME }}"
          LICENSE_PLATE: "${{ secrets.LICENSE_PLATE }}"
          ENVIRONMENT: "${{ secrets.ENVIRONMENT }}"
          DC_TEMPLATE: "app-dc-template.yaml"
          SERVICE_TEMPLATE: "app-service-template.yaml"
          ROUTE_TEMPLATE: "app-route-template.yaml"
          DIR: "app"
          IMAGE_TAG: "${{ env.pull_request_hash }}-dev"
        run: |
          ./.github/helpers/deploy.sh 
  DEV-health-check:
    runs-on: ubuntu-latest
    environment:
      name: APP-Dev
      # url: https://dpia-webapp-b996e6-dev.apps.silver.devops.gov.bc.ca
    needs: [DEV-deploy]
    steps:
    
      # Checkout Repository
      - uses: actions/checkout@v2
    
      # Login to BC Gov Openshift (CITZ Sandbox DEV Namespace)
      - name: Cluster Login -> DEV Namespace
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
      # Use application health helper script to monitor readiness/liveness probe response post deployment  
      - name: Health Check DEV deployment
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.APPLICATION_NAME }}"
        run: |
          ./.github/helpers/application-health.sh
  
  DEV-cleanup:
    runs-on: ubuntu-latest
    environment: APP-Dev
    needs: [DEV-health-check]
    steps:

      # Checkout Repository
      - uses: actions/checkout@v2

      # Login to BC Gov Openshift (CITZ Sandbox DEV Namespace)
      - name: Cluster Login
        uses: redhat-developer/openshift-actions@v1.1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          parameters: '{"apitoken": "${{ secrets.OPENSHIFT4_SA_PASSWORD }}"}'
          cmd: |
            'version'
      # Use cleanup helper script to remove any leftover deployment pod objects from previous deployment
      - name: Cleanup previous deployment pod objects
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
        run: |
          ./.github/helpers/cleanup-pods.sh
      # Use cleanup helper script to remove any leftover deployment pod objects from previous deployment
      - name: Cleanup previous replication controller objects
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_DEV_NAMESPACE }}"
        run: |
          ./.github/helpers/cleanup-rc.sh
